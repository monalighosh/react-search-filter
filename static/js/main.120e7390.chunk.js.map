{"version":3,"sources":["components/Image/Image.js","components/Card/Card.js","components/CardList/CardList.js","components/SearchBar/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["Image","props","className","src","alt","Card","person","picture","medium","name","first","last","email","location","country","CardList","people","map","index","key","SearchBar","onChange","onSearchChange","type","placeholder","App","state","searchValue","handleSearch","e","setState","target","value","fetch","peopleAPIResponse","json","peopleJSON","results","this","console","error","filteredPeople","filter","fullName","toLowerCase","val","includes","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uYASeA,G,wBAND,SAACC,GACb,OACE,yBAAKC,UAAU,eAAeC,IAAKF,EAAME,IAAKC,IAAKH,EAAMG,QCU9CC,EAXF,SAACJ,GAAD,OACX,yBAAKC,UAAU,QACb,kBAAC,EAAD,CACEC,IAAKF,EAAMK,OAAOC,QAAQC,OAC1BJ,IAAG,UAAKH,EAAMK,OAAOG,KAAKC,MAAvB,aAAiCT,EAAMK,OAAOG,KAAKE,QACxD,wBAAIT,UAAU,eAAd,UAAgCD,EAAMK,OAAOG,KAAKC,MAAlD,YAA2DT,EAAMK,OAAOG,KAAKE,OAC7E,uBAAGT,UAAU,eAAeD,EAAMK,OAAOM,OACzC,uBAAGV,UAAU,iBAAiBD,EAAMK,OAAOO,SAASC,WCGzCC,EATE,SAACd,GAAD,OACf,yBAAKC,UAAU,aACZD,EAAMe,OAAOC,KAAI,SAACX,EAAQY,GAAT,OAClB,kBAAC,EAAD,CAAMC,IAAKD,EAAOZ,OAAQA,SCEfc,G,MAPG,SAACnB,GAAD,OAChB,2BAAOC,UAAU,aACfmB,SAAUpB,EAAMqB,eAChBC,KAAK,SACLC,YAAavB,EAAMuB,gBCuCRC,E,2MAxCbC,MAAQ,CACNV,OAAQ,GACRW,YAAa,I,EAcfC,aAAe,SAACC,GACd,OAAO,EAAKC,SAAS,CAAEH,YAAaE,EAAEE,OAAOC,S,gOAVXC,MAAM,6G,cAAhCC,E,gBACmBA,EAAkBC,O,cAArCC,E,gBACeA,EAAWC,Q,OAA1BrB,E,OACNsB,KAAKR,SAAS,CAAEd,W,kDAEhBuB,QAAQC,MAAR,M,+IAQM,IAAD,EACyBF,KAAKZ,MAA7BV,EADD,EACCA,OAAQW,EADT,EACSA,YACVc,EAAiBzB,EAAO0B,QAAO,SAAApC,GACnC,IAAMqC,EAAW,UAAGrC,EAAOG,KAAKC,MAAf,YAAwBJ,EAAOG,KAAKE,MAAOiC,cACtDC,EAAMlB,EAAYiB,cACxB,OAAOD,EAASG,SAASD,MAG3B,OACE,yBAAK3C,UAAU,OACb,6BACE,6CACA,kBAAC,EAAD,CAAWsB,YAAY,eAAeF,eAAgBgB,KAAKV,gBAE7D,kBAAC,EAAD,CAAUZ,OAAQyB,S,GAnCRM,aCOEC,QACW,cAA7BC,OAAOpC,SAASqC,UAEe,UAA7BD,OAAOpC,SAASqC,UAEhBD,OAAOpC,SAASqC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAtB,GACLD,QAAQC,MAAMA,EAAMuB,c","file":"static/js/main.120e7390.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Image.css';\r\n\r\nconst Image = (props) =>  {\r\n  return (\r\n    <img className=\"card__avatar\" src={props.src} alt={props.alt}/>\r\n  );\r\n};\r\n\r\nexport default Image;","import React from 'react';\r\nimport './Card.css';\r\nimport Image from '../../components/Image/Image';\r\n\r\nconst Card = (props) => (\r\n  <div className=\"card\">\r\n    <Image \r\n      src={props.person.picture.medium} \r\n      alt={`${props.person.name.first}, ${props.person.name.last}`} />\r\n    <h2 className=\"card__title\">{`${props.person.name.first} ${props.person.name.last}`}</h2>\r\n    <p className=\"card__email\">{props.person.email}</p>\r\n    <p className=\"card__country\">{props.person.location.country}</p>\r\n  </div>\r\n);\r\n\r\nexport default Card;","import React from 'react';\r\nimport './CardList.css';\r\nimport Card from '../../components/Card/Card';\r\n\r\n\r\nconst CardList = (props) => (\r\n  <div className=\"card-list\">\r\n    {props.people.map((person, index) => (\r\n    <Card key={index} person={person} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './SearchBar.css';\r\n\r\nconst SearchBar = (props) => (\r\n  <input className=\"search-bar\" \r\n    onChange={props.onSearchChange}\r\n    type=\"search\" \r\n    placeholder={props.placeholder} />\r\n);\r\n\r\nexport default SearchBar;","import React, {Component} from 'react';\nimport './App.css';\nimport CardList from './components/CardList/CardList';\nimport SearchBar from './components/SearchBar/SearchBar';\n\nclass App extends Component {\n  state = {\n    people: [],\n    searchValue: '',\n  };\n\n  async componentDidMount () {\n    try {\n      const peopleAPIResponse = await fetch(\"https://randomuser.me/api/1.3/?results=18&inc=name,gender,picture,email,location&nat=au,nz,gb,us,ie,ca,nl\");\n      const peopleJSON = await peopleAPIResponse.json();\n      const people = await peopleJSON.results;\n      this.setState({ people });\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  handleSearch = (e) => {\n    return this.setState({ searchValue: e.target.value });\n  }\n \n  render() {\n    const { people, searchValue } = this.state;\n    const filteredPeople = people.filter(person => {\n      const fullName = `${person.name.first} ${person.name.last}`.toLowerCase();\n      const val = searchValue.toLowerCase();\n      return fullName.includes(val);\n    });\n\n    return (\n      <div className=\"App\">\n        <div>\n          <h1>People Finder</h1>\n          <SearchBar placeholder=\"Enter a name\" onSearchChange={this.handleSearch} />\n        </div>\n        <CardList people={filteredPeople} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}